<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Antranig Basman</title>
    <link>https://ponder.org.uk/</link>
    <description>Recent content on Antranig Basman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>amb26web@ponder.org.uk (Antranig Basman)</managingEditor>
    <webMaster>amb26web@ponder.org.uk (Antranig Basman)</webMaster>
    <lastBuildDate>Fri, 26 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ponder.org.uk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>This week&#39;s reactive chats</title>
      <link>https://ponder.org.uk/wip/2025-09-26-this-weeks-reactive-chat/</link>
      <pubDate>Fri, 26 Sep 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/wip/2025-09-26-this-weeks-reactive-chat/</guid>
      <description>Some good chats this week on reactive matters. Firstly on Tuesday with Patrick Dubroy, a fellow substratist. Patrick is a splendid chap who amongst many other works is the maintainer of a powerful, user-friendly parsing toolkit Ohm.&#xA;Patrick pinged me last week explaining that he was contemplating a collaboration with with Camille and Yann who were building a document publishing pipeline sourced from, amongst other formats, AsciiDoc (for related details see Camille&amp;rsquo;s recent PhD thesis).</description>
    </item>
    <item>
      <title>Archaeology of Glitches</title>
      <link>https://ponder.org.uk/post/2025-07-01-archaeology-of-glitches/</link>
      <pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/post/2025-07-01-archaeology-of-glitches/</guid>
      <description>In 2024 I was working on a small project that I wanted to be able to be handed over, and wondered what was the most congenial way out there of rendering apps that wouldn&amp;rsquo;t bring in too heavy a dependency. My eye was caught by the following passage in preact-signals&amp;rsquo; test cases:&#xA;it(&amp;#34;should drop A-&amp;gt;B-&amp;gt;A updates&amp;#34;, async () =&amp;gt; { // A // / | // B | &amp;lt;- Looks like a flag doesn&amp;#39;t it?</description>
    </item>
    <item>
      <title>Substrates Vision Statement</title>
      <link>https://ponder.org.uk/post/2025-06-03-substrates-vision/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/post/2025-06-03-substrates-vision/</guid>
      <description>This is my vision statement submitted to the Substrates-25 workshop held in Prague in June 2025, co-located with &amp;lt;Programming 2025&amp;gt;.&#xA;To disclosable computing through concrete abstractions What is a substrate? Jonathan Edwards defines a substrate as embodying the following properties:&#xA;A complete and self-sufficient programming system, with a persistent code &amp;amp; data store, providing a direct-manipulation UI on that state. Supports live programming. Programming &amp;amp; using are on a spectrum, not distinct.</description>
    </item>
    <item>
      <title>Learning from Codestrates</title>
      <link>https://ponder.org.uk/wip/2025-04-24-learning-from-codestrates/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/wip/2025-04-24-learning-from-codestrates/</guid>
      <description>For the last few days I&amp;rsquo;ve been looking at the amazing Codestrates project, a development from Webstrates that has been under development by Clemens Klokmose and his team at CAVI since 2015. This has always been a close sibling project since the days of our 2016 paper and the development into Codestrates with its powerful in-browser IDE makes the convergence even more interesting.&#xA;Reuse and abstractions in Substrates There has always been a fundamental difference in philosophy between Webstrates and Infusion, in that the substrate underlying Webstrates is simply the DOM itself.</description>
    </item>
    <item>
      <title>Co-occurrences are here again</title>
      <link>https://ponder.org.uk/wip/2025-04-21-co-occurrences-are-here-again/</link>
      <pubDate>Mon, 21 Apr 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/wip/2025-04-21-co-occurrences-are-here-again/</guid>
      <description>Reimplementing Infusion for its reactive version made me vow to concentrate on its everyday, bread and butter features at the expense of what might have been &amp;ldquo;speculative nonsense&amp;rdquo; in its earlier history. However, implementing something pretty basic – the ability to render lists of components – brought me right back to an old conversation.&#xA;Here&amp;rsquo;s the situation – one author wrote a todoItem which is a templateViewComponent:&#xA;fluid.def(&amp;#34;fluid.tests.todoItem&amp;#34;, { $layers: &amp;#34;fluid.</description>
    </item>
    <item>
      <title>An era for new notations</title>
      <link>https://ponder.org.uk/post/2025-04-19-new-notation-era/</link>
      <pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/post/2025-04-19-new-notation-era/</guid>
      <description>I argue that there has never been a more promising time for developing fruitful new notations.&#xA;Some, considering the enormous success of modern LLMs in solving increasingly complex &amp;ldquo;problems&amp;rdquo; – in terms of translating a verbal or pictorial design specification into code – means programming is now a &amp;ldquo;solved&amp;rdquo; problem. They imagine a future where humans no longer need to understand or write code.&#xA;I believe this is wrong on several accounts.</description>
    </item>
    <item>
      <title>Coming Out of the Shadows</title>
      <link>https://ponder.org.uk/post/2025-04-13-coming-out-of-the-shadows/</link>
      <pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/post/2025-04-13-coming-out-of-the-shadows/</guid>
      <description>Or – &amp;ldquo;Evading Gilad&amp;rsquo;s Comparison&amp;rdquo;.&#xA;A 2014 posting of Gilad Bracha&amp;rsquo;s, A DOMain of shadows, has prompted a lot of thought over the years. I refer to it in passing in last month&amp;rsquo;s On UI as Code but this week a line of argument became a bit clearer on how the comparison in the posting might be dodged.&#xA;Gilad&amp;rsquo;s note is about the design tension constantly pushing complexity into any purportedly &amp;ldquo;simple&amp;rdquo; user-facing language, that we might call a DSL.</description>
    </item>
    <item>
      <title>Templates and weird attributes together</title>
      <link>https://ponder.org.uk/wip/2025-04-07-templates-and-weird-attributes-together/</link>
      <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/wip/2025-04-07-templates-and-weird-attributes-together/</guid>
      <description>Trying to put into practice thoughts from the previous two postings on template thinking and weird attributes for event binding revealed some interesting problems.&#xA;Firing up ${ }-based templates revealed an awkward problem. This prevents us using backtick template literals in code since these automatically interpret ${} syntax and so will break as soon as they are evaluated.&#xA;At the same time, use of @click style event binding revealed a really interesting limitation.</description>
    </item>
    <item>
      <title>Staring at the wand</title>
      <link>https://ponder.org.uk/wip/2025-04-04-staring-at-the-wand/</link>
      <pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/wip/2025-04-04-staring-at-the-wand/</guid>
      <description>OK, so we have now imported a visually reasonable and properly lithified version of Pell into a tiny static page which is itself lithified from the rendered output of the substrates page, which will be where the most basic editing demo gets scaffolded.&#xA;I mused about making the disclosing tool into a pencil of the kind we see in the Lively Kernel UI but the &amp;ldquo;magic wand&amp;rdquo; was hard to resist and fits in with some rhetoric about this gesture.</description>
    </item>
    <item>
      <title>Change of Tack on Templating</title>
      <link>https://ponder.org.uk/wip/2025-04-03-change-of-tack-on-templating/</link>
      <pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/wip/2025-04-03-change-of-tack-on-templating/</guid>
      <description>I get to staring at the markup templates that were already implemented for the Galiano 2023 Bioblitz and thinking how to adapt/reuse them for the upcoming Diatoms of the Salish Sea viz forces me to put some things in focus about how templating is going to have to work for these communities. I&amp;rsquo;d vaguely hoped that the details of how Infusion templating was going to interact with Hugo templating would somehow just &amp;ldquo;come out in the wash&amp;rdquo; but naturally this isn&amp;rsquo;t going to happen without some kind of focused plan!</description>
    </item>
    <item>
      <title>Hunting rich editors</title>
      <link>https://ponder.org.uk/wip/2025-03-28-hunting-rich-editors/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/wip/2025-03-28-hunting-rich-editors/</guid>
      <description>The substrate&amp;rsquo;s transition to editability will need to present a &amp;ldquo;mostly rendered&amp;rdquo; view of itself – managed by some form of rich text editor. A huge &amp;ldquo;grab-bag list&amp;rdquo; is at JefMari&amp;rsquo;s curated list of Awesome Wysiwyg Editors which can rapidly be whittled down to a shortlist. CKEditor 5 and TinyMCE are familiar from decades ago. But the gold standard is clearly Marijn&amp;rsquo;s ProseMirror – basic example here and really nice markdown editing example here.</description>
    </item>
    <item>
      <title>On UI as code</title>
      <link>https://ponder.org.uk/post/2025-03-20-ui-as-code/</link>
      <pubDate>Thu, 20 Mar 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/post/2025-03-20-ui-as-code/</guid>
      <description>UI as Code as a named slogan originated in the context of Dart&amp;rsquo;s Flutter UI toolkit created by Google. It is centrally described by Bob Nystrom in this thoughtful posting Marking Dart a Better Language for UI. I see it as part of a wider trend in many environments to express designs in general-purpose programming language code rather than configuration languages with less expressive power. For example, ESLint&amp;rsquo;s flat config system introduced in 2022 moves its previous JSON-based linting configuration into JavaScript code.</description>
    </item>
    <item>
      <title>On Development Speed</title>
      <link>https://ponder.org.uk/post/2025-03-14-development-speed/</link>
      <pubDate>Fri, 14 Mar 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/post/2025-03-14-development-speed/</guid>
      <description>A recent posting Why the Latest JavaScript Frameworks Are a Waste of Time sparks a short train of thought. As well as the characteristically disrespectful tone of discussion that technical people often adopt, and the suggestion, contrary to my speculations looking at DOM reconciliation, that people really do use low-level benchmarks when choosing frameworks, is the notion of frameworks contributing to development speed. One commentor invites us to watch him against the clock to implement a front end in Svelte rather than React.</description>
    </item>
    <item>
      <title>Benchmarking DOM reconciliation algorithms</title>
      <link>https://ponder.org.uk/post/2025-02-07-benchmarking-dom-reconciliation/</link>
      <pubDate>Fri, 07 Feb 2025 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/post/2025-02-07-benchmarking-dom-reconciliation/</guid>
      <description>Since the Infusion 6 renderer is close to being a reality, it is time to understand the characteristics of some of the various DOM reconciliation algorithms out there.&#xA;Could we do without a virtual DOM entirely? To start with is the question of whether we even really want one at all — the classic Svelte Virtual DOM is pure overhead post has been though its various hype cycles but 7 years later the majority of frameworks out there still have one so the consequences are clearly not as clear-cut as the argument would have it.</description>
    </item>
    <item>
      <title>A good function</title>
      <link>https://ponder.org.uk/term/a-good-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/a-good-function/</guid>
      <description>A good function is:&#xA;A pure function, one without side-effects whose return value depends only on its arguments Available at a stable public name in a global namespace Performs work only linearly proportional to the size of its arguments (considered as structures) This notion was first described the Fluid wiki on this 2005 page which goes into some somewhat crusty historical detail for justification. The main upshot is that such a definition aids transparency &amp;mdash; the ability to reason from effects to causes, and liveness &amp;mdash; for the system to responsively adapt to the user&amp;rsquo;s gestures.</description>
    </item>
    <item>
      <title>About me</title>
      <link>https://ponder.org.uk/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/page/about/</guid>
      <description>After training in mathematics at Cambridge University, I devolved firstly into a Computer Science Diploma and then branched out into a PhD in Computer Vision at the Engineering Department&amp;rsquo;s Speech, Vision and Robotics group.&#xA;After working in various startups in the Cambridge area I spent a while working at CARET, the Centre for Applied Research in Educational Technologies.&#xA;Following that I spent 5 years as a Visiting Scholar at the University of Colorado at Boulder as a guest of Clayton Lewis.</description>
    </item>
    <item>
      <title>Disclosable Computing</title>
      <link>https://ponder.org.uk/term/disclosable-computing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/disclosable-computing/</guid>
      <description>I argue that what the public really wants is disclosable computing.&#xA;The first error committed by those trying to make the power of computing accessible to the wider public is to assume that they want or need this power. Backed up by (Rode et al, 2006)1 I consider that what the public largely would like is some more or less coordinated access to some body of state. Whereas, the designer of a new kind of computational expression usually starts by seeing what form is taken by a recursive chestnut such as the Fibonacci numbers or the factorial function, as if these represented some kind of standard requirement rather than a certain kind of in-joke.</description>
    </item>
    <item>
      <title>Divergence</title>
      <link>https://ponder.org.uk/term/divergence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/divergence/</guid>
      <description>Defined in my 2016 paper, divergence represents any discrepancy between the runtime state of a program, and the state through which it can be authored. Typical sources of divergence include the program&amp;rsquo;s call stack, uninterpreted addresses within the heap, event listeners and typical sources of object representation such as vtables and the like.&#xA;In a tradition of materialised programming, divergence should be minimised, in order to reduce the mental burden on those trying to visualise the effects of their edits.</description>
    </item>
    <item>
      <title>End user programming</title>
      <link>https://ponder.org.uk/term/end-user-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/end-user-programming/</guid>
      <description>End-user programming is a time-honoured discipline but end-user tools such as spreadsheets are held in contempt by specialised developers. The discipline actively works to raise barriers of abstraction and tooling to ensure that it is only accessible by specialists and what investment is made in end-user tools is done under the assumption, like Gabriel&amp;rsquo;s, that the gulf between those empowered to build software and those empowered to use it will stay unbridgeable.</description>
    </item>
    <item>
      <title>Externalisability</title>
      <link>https://ponder.org.uk/term/externalisability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/externalisability/</guid>
      <description>Defined in my 2018 paper, externalisability, together with its dual property of addressibility, represents an essential property of a substrate supporting open authorship. An externalisable design is one which is serialisable in a form in which every design element has more or less stable and legible coordinates. An addressible, externalised serialisation of a design could be in terms of a JSON document with human-readable keys, to be contrasted with relatively opaque kinds of serialisation such as Python&amp;rsquo;s pickling or Java&amp;rsquo;s object serialization systems, designed to round-trip arbitrary in-memory structures allocated in a general-purpose programming language.</description>
    </item>
    <item>
      <title>Glitch</title>
      <link>https://ponder.org.uk/term/glitch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/glitch/</guid>
      <description>The term glitch in the sense of a reactive miscomputation first entered the literature in Cooper &amp;amp; Krishnamurthi&amp;rsquo;s 2006 FrTime paper, &amp;ldquo;Embedding Dynamic Dataflow in a Call-by-Value Language&amp;rdquo;. They define it as&#xA;where a signal is recomputed before all of its subordinate signals are up-to-date&#xA;This definition appears helpful and clearcut, but the more one thinks about how to operationalise this definition in a particular concrete context, and verify that a system is rigorously glitch-free, the less clear it seems.</description>
    </item>
    <item>
      <title>Habitable</title>
      <link>https://ponder.org.uk/term/habitable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/habitable/</guid>
      <description>Habitability as applied to software technology is a term coined by Richard Gabriel in his 1993 article &amp;ldquo;Habitability and Piecemeal Growth&amp;rdquo;. You can see part of this article reproduced on Kartik Agaram&amp;rsquo;s excellent blog, as republished in Gabriel&amp;rsquo;s book Patterns of Software which I hugely recommend – I consider Gabriel the finest writer on software technology of his generation.&#xA;Connecting this idea with Christopher Alexander&amp;rsquo;s idea of organic growth in the context of the architecture of buildings, Gabriel says</description>
    </item>
    <item>
      <title>Infusion</title>
      <link>https://ponder.org.uk/infusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/infusion/</guid>
      <description>Infusion, originally an initiative of the Fluid community since 2008, is a JavaScript library enabling the creation of flexible software. Versions 1 through 4 of Infusion, documented and hosted on the Fluid project&amp;rsquo;s site, were relatively conventionally structured libraries supporting the development of various UI widgets.&#xA;Since 2024 a comprehensive rewrite of Infusion has been underway for version 6 based on reactive primitives throughout, structuring it as a software substrate constituting an integration domain.</description>
    </item>
    <item>
      <title>Integration Domain</title>
      <link>https://ponder.org.uk/term/integration-domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/integration-domain/</guid>
      <description>An integration domain is defined in Stephen Kell&amp;rsquo;s 2009 paper The Mythical Matched Modules as a domain where&#xA;languages and tools are specialised towards composition of software, and so do not resemble conventional languages relations are expressed between runtime values, predicated on the context in which they occur In addition through Stephen&amp;rsquo;s principle of interface hiding, dependencies do not explicitly manifest themselves in the domain except through the contextualised values which the domain puts into relation.</description>
    </item>
    <item>
      <title>Lithification</title>
      <link>https://ponder.org.uk/term/lithification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/lithification/</guid>
      <description>The term lithification in software development was coined by r0ml (Robert Lefkowitz) in his incendiary 2017 talk Keeping Linux Great which is written up further in his equally trenchant article Giving up on Open Source Software. It describes a mode of software reuse that appears entirely anti-religious to anyone with a traditional programming education, of simply appropriating the source code for any library or implementation one needs, incorporating it into one&amp;rsquo;s own codebase and then bashing on it.</description>
    </item>
    <item>
      <title>My Communities</title>
      <link>https://ponder.org.uk/communities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/communities/</guid>
      <description>Since 2017 I have been Biodiversity Informatics lead for IMERSS, the Institute for Multidisciplinary Ecological Research in the Salish Sea. I have been working to help communities with different models for knowledge &amp;mdash; expert naturalists, citizen scientists, and Indigenous individuals and others &amp;mdash; respectfully cooperate to share their knowledge of the natural world and be empowered as stewards of their natural environment. Some visualisations I&#39;ve produced can be seen on the IMERSS portal.</description>
    </item>
    <item>
      <title>My Projects</title>
      <link>https://ponder.org.uk/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/projects/</guid>
      <description>Since 2022 I have worked for the Oregon Bee Atlas to help landowners understand plant-pollinator interactions and guide their land use decisions including evaluation of seed mixes, as well as supporting their volunteers&#39; observation work. I have implemented the Melittoflora tool using a provisional version of the [Infusion](/infusion) framework which filters the project&#39;s data on wild bees by geographical, temporal and taxonomic filters and visualises the resulting interactions as a live, attractive bipartite ribbon graph.</description>
    </item>
    <item>
      <title>Substrate</title>
      <link>https://ponder.org.uk/term/substrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/substrate/</guid>
      <description>A substrate is a kind of self-sufficient model or material for the construction of software. Jonathan Edwards&amp;rsquo; definition is a great starting point comprising the following points:&#xA;A complete and self-sufficient programming system Persistent code &amp;amp; data store Direct-manipulation UI on that state Live programming Programming &amp;amp; using are on a spectrum, not distinct Conceptually unified — not a “stack” Summarized as a slogan: “A PL, DB, &amp;amp; WYSIWYG document unified together.</description>
    </item>
    <item>
      <title>Unavailable Value</title>
      <link>https://ponder.org.uk/term/unavailable-value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/unavailable-value/</guid>
      <description>An unavailable value is a special payload to a reactive system unifying handling of errors and asynchrony under a common mechanism responding to &amp;ldquo;design incompletion for any reason&amp;rdquo;. I named a special reactive payload as an &amp;ldquo;unavailable value&amp;rdquo; indicating that the design was incomplete either as a result of depending on pending I/O or else on a design/syntax error in the system.&#xA;My first 2024 simplistic version of this simply repurposed the JavaScript undefined value as a special reactive payload that would short-circuit behaviour of any computed and cull the action of any effect that was geared through it.</description>
    </item>
  </channel>
</rss>
