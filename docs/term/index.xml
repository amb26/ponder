<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terms on Antranig Basman</title>
    <link>https://ponder.org.uk/term/</link>
    <description>Recent content in Terms on Antranig Basman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>amb26web@ponder.org.uk (Antranig Basman)</managingEditor>
    <webMaster>amb26web@ponder.org.uk (Antranig Basman)</webMaster>
    <atom:link href="https://ponder.org.uk/term/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A good function</title>
      <link>https://ponder.org.uk/term/a-good-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/a-good-function/</guid>
      <description>A good function is:&#xA;A pure function, one without side-effects whose return value depends only on its arguments Available at a stable public name in a global namespace Performs work only linearly proportional to the size of its arguments (considered as structures) This notion was first described the Fluid wiki on this 2005 page which goes into some somewhat crusty historical detail for justification. The main upshot is that such a definition aids transparency &amp;mdash; the ability to reason from effects to causes, and liveness &amp;mdash; for the system to responsively adapt to the user&amp;rsquo;s gestures.</description>
    </item>
    <item>
      <title>Disclosable Computing</title>
      <link>https://ponder.org.uk/term/disclosable-computing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/disclosable-computing/</guid>
      <description>I argue that what the public really wants is disclosable computing.&#xA;The first error committed by those trying to make the power of computing accessible to the wider public is to assume that they want or need this power. Backed up by (Rode et al, 2006)1 I consider that what the public largely would like is some more or less coordinated access to some body of state. Whereas, the first port of call of any designer of a new kind of computing expression is see what form is taken by a recursive chestnut such as the Fibonacci numbers or the factorial function, as if these represented some kind of standard requirement rather than a certain kind of in-joke.</description>
    </item>
    <item>
      <title>Divergence</title>
      <link>https://ponder.org.uk/term/divergence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/divergence/</guid>
      <description>Defined in my 2016 paper, divergence represents any discrepancy between the runtime state of an application, and the state through which it can be authored. Typical sources of divergence include the program&amp;rsquo;s call stack, unintepreted addresses within the heap, event listeners and typical sources of object representation such as vtables and the like.&#xA;In a tradition of materialised programming, divergence should be minimised, in order to reduce the mental burden on those trying to visualise the effects of their edits.</description>
    </item>
    <item>
      <title>End user programming</title>
      <link>https://ponder.org.uk/term/end-user-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/end-user-programming/</guid>
      <description>End-user programming is a time-honoured discipline but end-user tools such as spreadsheets are held in contempt by specialised developers. The discipline actively works to raise barriers of abstraction and tooling to ensure that it is only accessible by specialists and what investment is made in end-user tools is done under the assumption, like Gabriel&amp;rsquo;s, that the gulf between those empowered to build software and those empowered to use it will stay unbridgeable.</description>
    </item>
    <item>
      <title>Externalisability</title>
      <link>https://ponder.org.uk/term/externalisability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/externalisability/</guid>
      <description>Defined in my 2018 paper, externalisability, together with its dual property of addressibility, represents an essential property of a substrate supporting open authorship. An externalisable design is one which is serialisable in a form in which every design element has more or less stable and legible coordinates. An addressible, externalised serialisation of a design could be in terms of a JSON document with human-readable keys, to be contrasted with relatively opaque kinds of serialisation such as Python&amp;rsquo;s pickling or Java&amp;rsquo;s object serialization systems, designed to round-trip arbitrary in-memory structures allocated in a general-purpose programming language.</description>
    </item>
    <item>
      <title>Habitable</title>
      <link>https://ponder.org.uk/term/habitable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/habitable/</guid>
      <description>Habitability as applied to software technology is a term coined by Richard Gabriel in his 1993 article &amp;ldquo;Habitability and Piecemeal Growth&amp;rdquo;. You can see part of this article reproduced on Kartik Agaram&amp;rsquo;s excellent blog, as republished in Gabriel&amp;rsquo;s book Patterns of Software which I hugely recommend – I consider Gabriel the finest writer on software technology of his generation.&#xA;Connecting this idea with Christopher Alexander&amp;rsquo;s idea of organic growth in the context of the architecture of buildings, Gabriel says</description>
    </item>
    <item>
      <title>Integration Domain</title>
      <link>https://ponder.org.uk/term/integration-domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/integration-domain/</guid>
      <description>An integration domain is defined in Stephen Kell&amp;rsquo;s 2009 paper The Mythical Matched Modules as a domain where&#xA;languages and tools are specialised towards composition of software, and so do not resemble conventional languages relations are expressed between runtime values, predicated on the context in which they occur In addition through Stephen&amp;rsquo;s principle of interface hiding, dependencies do not explicitly manifest themselves in the domain except through the contextualised values which the domain puts into relation.</description>
    </item>
    <item>
      <title>Lithification</title>
      <link>https://ponder.org.uk/term/lithification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/lithification/</guid>
      <description>The term lithification in software development was coined by r0ml (Robert Lefkowitz) in his incendiary 2017 talk Keeping Linux Great which is written up further in his equally trenchant article Giving up on Open Source Software. It describes a mode of software reuse that appears entirely anti-religious to anyone with a traditional programming education, of simply appropriating the source code for any library or implementation one needs, incorporating it into one&amp;rsquo;s own codebase and then bashing on it.</description>
    </item>
    <item>
      <title>Substrate</title>
      <link>https://ponder.org.uk/term/substrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>amb26web@ponder.org.uk (Antranig Basman)</author>
      <guid>https://ponder.org.uk/term/substrate/</guid>
      <description>A substrate is a kind of self-sufficient model or material for the construction of software. Jonathan Edwards&amp;rsquo; definition is a great starting point comprising the following points:&#xA;A complete and self-sufficient programming system Persistent code &amp;amp; data store Direct-manipulation UI on that state Live programming Programming &amp;amp; using are on a spectrum, not distinct Conceptually unified — not a “stack” Summarized as a slogan: “A PL, DB, &amp;amp; WYSIWYG document unified together.</description>
    </item>
  </channel>
</rss>
